
-----

In this document we list some of the benefits of the new implementation of the colored coins protocol.

= Decentralization =

== Use of Torrent files ==

The new colored coins protocol implementation stores asset metadata in torrent files. There are important advantages to this approach: * '''Decentralization''' * '''Robustness''': Even if our servers go down, the data is not lost * '''Ownership''': No third party ''owns'' your data * '''Provable immutability''': A SHA-256 hash of your metadata is (''optionally'') [[Coloring#data-storage|stored on the blockchain]]. This allows our code to verify that the data received from the torrent file is indeed your data.

= Coherent issuance policy =

The new colored coins protocol implementation enforces a coherent issuance policy by supporting two types of Assets, locked and unlocked. ### Unlocked Assets Issuers of unlocked assets can [[Asset%20ID#unlocked|keep issuing]] more units of their asset.

For example, a coffee shop brand issues each month 1000 units of a free-cup-of-coffee asset, each redeemable in it's stores for a free cup of coffee. Each month, 1000 extra units are issued from the same asset.

=== Locked Assets ===

Locked assets are an asset with a fixed amount set at the moment of issuance. Even the asset issuer [[Asset%20ID#locked|cannot issue more units]] of his own locked asset.

For example, owning a fixed percentage of a company can be represented with locked assets. For example, a Venture Capital firm is interested in investing 2.5 million dollars in a startup, provided that it receives 25% control, even in face of future dilution of shares. The company can issue a locked ''startup-x-to-the-moon'' asset with an amount of, say, 1 million units and send 25% of the issued units to the VC firm upon receiving their investment. The VC can be completely confident that no dilution of it's shares is possible.

= Flexibility =

== Metadata on every colored transaction ==

The new colored coins protocol implementation allows for adding asset metadata on every transaction, not only during issuance, which is very useful when not all the relevant data is present at the moment of issuance.

For example, a movie theater has 500 seats. The theater can issue 500 units of a ''mission-impossible-10-premiere'' asset representing a ticket to the premiere of the new blockbuster in town. During the buy process of a ticket on the theater's website a client selects a seating position. Each single unit of the ''mission-impossible-10-premiere'' asset sent to a client's colored coin wallet already contains the metadata of the selected seat. Another example would be adding temporary data for stocks when there some kind of an event, like restrictions, stock splits etc.

= Usability =

== Support for zero confirmation transactions ==

Bitcoin transaction are confirmed every 10 minutes (on average). Waiting for confirmations gives a poor user experience, especially considering current standards of responsiveness expected from web and mobile applications.

The architecture of the new colored coins protocol implementation allows us to support asset issuance and transfer in '''zero confirmations''' (and in fact even within the [[Coloring#issuance-transaction-encoding|same transaction]]).

While it is true that each confirmation of a Bitcoin transaction increases our confidence in it, for many real world cases involving small amounts of money (a cup of coffee, a movie ticket, etc..) most users and merchants accept zero confirmation transactions.

The fact that the new colored coins protocol implementations lends support to [[Asset%20ID#asset-ids-and-bitcoin-confirmations|manipulating assets in zero confirmation]] is a big boon for user experience.

== Support for light wallets ==

In order to allow colored coin wallets to run on mobile devices, the protocol must be able to verify colored transactions without the need to run a full Bitcoin node. The new colored coins protocol implementation supports thin (a.k.a SPV) Bitcoin wallets and can run on mobile devices.

TODO: write more

= Efficiency =

== Processing many assets in one transaction ==

The new colored coins [[Coloring#asset-manipulating-trasnactions|protocol implementation]] uses a novel encoding for [[Transfers|asset transfer]]. This encoding allows us to process many assets together in a single transaction (in some cases we can accommodate as many as 8 colors).

== Low Prices &amp; minimal bloat ==

The new colored coins protocol implementation achieves a high level of data compression using the way [[Transfers|asset transfer instructions]] and [[Number%20Encoding|transfer and issuance amounts]] are encoded. This leads to lowering the price in bitcoins needed to support each asset manipulating transaction as well as reducing blockchain bloat.

= Smart Contracts =

'''TODO''' Mark - Give an overview on why we added it etc... and we will give a link to the &quot;how it works&quot; that assaf is writing.

The new colored coins protocol implementation includes a '''[[Rules|Rule Engine]]''' that operates on rules that can be added in the metadata of an asset. Rules may be [[Rules#inheritance|Open or Locked]], when Open any Issuer or Transfer-er may add to the rule-set, when Locked the Rule becomes Immutable.

Asset_Genesis is required when reissuing an asset that is done by a minter no matter if the asset is locked or not, and must point to the transaction and block of the first issuance.

At first stage our rule engine will support 4 different rule that could be very powerful when combined:

<pre>{
version (int32): version of the rule system,
fees (addressAssetValueList, optional): Array of fee itmes and 
locking items,
expiration (expirationItem, optional): Name of the category,
minters (array[mintersList], optional): Name of the category,
holders (array[holdersList], optional): Name of the category
}

holdersList {
address (string): Array of fee itmes and locking items,
locked (boolean): Name of the category
}
</pre>
== 1. [[Rules#holders|Valid/Confirmed addresses]] ==

Issuing an asset with a set of rules on what addresses are allowed to hold this Asset. by default the holders rule is empty and Open.

One of the biggest debates for using a permissionless blockchain like the bitcoin blockchain as a financial instetution is the ability to control the assets in a manner that will comply with regulations like AML and KYC. Using this rule one would be able to issue an asset that is valid only when stored in pre defined confirmed addresses adding permissions in a permissionless blockchain.

Example - A private equity market issuing an asset that only accredited investor are allowed to buy and hold a specific address after a full KYC. In that case the exchange/ crowdfunding platform will verify the identity and the address by signing a transaction and match between the person and the address. Sending or selling the asset to an un confirmed address will end in loosing the asset (the asset will become invalid in an un registered address). The issuer of the asset would be able to add more permissions (addresses) to the list of confirmed addresses the asset will be valid in if the flag locked is false.

== 2. [[Rules#fees|Asset Affiliation]] ==

Determines if there should be a fee when an Asset is transferred and what address should receive the fee, there could be multiple fee rules for one asset.By default the fees rule is empty and the rule is Open.

Creating a decentralised seconderiy marketplace for specific assets like ticketing has a problematic business model for ticketing companies. When creating an asset and selling it in the market the issuer loose control over the market receiving zero fees when asset is being transferred between users. This rule will allow companies to use the security mechanism of the blockchain to eliminate fraud while still gaining from each transaction being made outside of the companies centralised database.

== 3.[[Rules#expiration|Asset Expiration]] ==

Determines the lifespan of an Asset, when expiration time is reached the asset returns to the last valid Output that has a valid expiration.by default the expiration rule is empty and Open.<br />Time based assets could be used for loans, limited time access assets like a key, a coupon valid for X amount of time and many other use cases where an asset have a life time.

Example - A time sharing platform like Airbnb issuing a &quot;key&quot; asset that opens a specific apartment door for X amount of time.

== 4.[[Rules#minters|Minters]] ==

Addresses that are allowed to re-Issue an Asset. by default the minters rule is empty and Locked Give &quot;Admin&quot; permission to pre defined addresses like issue more of the same assets or add meta data.

Example - Headquarters of a bank issuing a USD coin backed by the bank and want to give permission to other branches of the same bank or other bank to issue more of the same USD coins.

<blockquote><ul>
<li>
-----
</li></ul>
</blockquote>
