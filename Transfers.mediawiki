The new colored coins protocol uses defines a mini scripting language that efficiently encodes the parsing of a valid colored transaction to extract the exact flow of assets from inputs to outputs. Each Transfers instruction is built out of 5 pieces of data (3 booleans and two integers):

== Transfer Instructions ==

|Command |Type |Memory |Meaning| |:-----------------:|-------|:---:|-------| |[[#skip|Skip]] |Boolean|1 bit |0 =&gt; Stay on input after processing<br/>1 =&gt; skip to next input after processing| |[[#range|Range]] |Boolean|1 bit |0 =&gt; '''Output''' size is 5 bits and understood literally<br/>1 =&gt; '''Output''' size is 13 bits and understood as specifying a range| |[[#percent|Percent]]|Boolean|1 bit |0 =&gt; '''Amount''' is understood literally<br/>1 =&gt; '''Amount''' is understood as percent (1 byte) |[[#output|Output]] |Integer|5 bits (Range=0)
<hr/>
13 bits (Range=1)| Specific Output index between 0..31
<hr/>
('''Range'''=1) Range of outputs between index 0 and the specified index (maximum 8191) |[[#amount|Amount]]|Integer|[[Number%20Encoding|1-7]] bytes (Percent=0)
<hr/>
1 Byte (Percent=1)| Number of units to be transferred
<hr/> 
Percent of units to be transferred

=== Skip ===

Decides whether the '''next''' instruction will be processed against that same input (skip = 0) or against the next input (skip = 1).

=== Range ===

Decides whether the [[#output|Output]] integer specifies the actual index of an output or the maximal index in a range of outputs (starting from index 0) as the target for the transfer instruction.

=== Percent ===

Decides whether the [[#amount|Amount]] integer should be understood as a number of units to be transferred (percent = 0) or as a percent of existing units to be transferred (percent = 1).

=== Output ===

Specify the target output (or range of outputs) of the transfer.

* Range = 0: Make the transfer to the output of the specified index. Uses 5 bits, thus allowing to specify any output index between 0 and 31.
* Range = 1: Make the '''same transfer''' to '''all outputs''' up to the specified index. Uses 13 bits, thus allowing to specify output ranges as big as 0-8191. Useful for Mass activities such as dividend payout to shareholders.

=== Amount ===

Specifies the amount of units (or percentage of units if percent = 1) to be transferred. * Percent = 0: Amount is a signed integer encoded in our [[Number%20Encoding|precision encoding scheme]] and requiring 1-7 bytes of memory, depending on the number. * Percent = 1: An integer between 1 and 100, requiring 1 byte of memory.

'''TODO''' are percents integral or can we specify fractional percents?

==== Note on Memory Consumption ====

Note that the total memory requirement for encoding the Skip+Range+Percent+Output of each transfer instruction is exactly 1 or 2 bytes (depending on whether Range is 0 or 1). Therefore, each transfer instruction requires between 2 to 9 bytes, depending on the Amount.

== Transfer Rules ==

The rules by which the colored coins software transfers assets between inputs and output when parsing a valid asset transfer transaction are as follows: * Begin with the first asset of the first input in the transaction * Range * '''0''' move the specified amount of the currently processed asset to the output in the index specified in ''Output''. The maximal index is 31. * '''1''' move the specified amount of the currently processed asset to all outputs in the range of indices from 0 all the way to the index specified in ''Output''. The maximal index is 8191. * Process each asset type (a.k.a color) until it is exhausted * All inputs in the transaction must be encoded for (even if has no assets)

* '''TODO''' What happens with unaccounted assets
* '''TODO''' What determines the order of assets in an input?

== Examples ==

* We have 3 assets of types <code>A, B, C</code>
* The first input in our transaction has '''10''' units of asset <code>A</code> and '''12''' units of asset <code>B</code>
* The second input has '''100''' units of asset <code>C</code>

The following chain of instructions

<pre> 0 0 0 0 3    0 0 0 1 7    0 0 1 1 50    1 0 0 2 3    0 1 0 49 2</pre>
means:

# <code>0 0 0 0 3</code> Transfer 4 units of asset <code>A</code> from the first input to the first output (index 0). '''Stay''' on first input.
# <code>0 0 0 1 7</code> Transfer the remaining 7 units of asset <code>A</code> from the first input to the second output (index 1). '''Stay''' on first input.
# <code>0 0 1 1 50</code> Transfer 6 units of asset <code>B</code> to second output. 6 units because 6 is 50% of 12 and we are now processing asset <code>B</code> because the previous instructions exhausted asset <code>A</code> in the first input. '''Stay''' on first input.
# <code>1 0 0 2 3</code> Transfer 3 units of asset <code>B</code> to the third output (index 2). '''Skip''' to second input.
# <code>0 1 0 49 2</code> Transfer 2 units of asset <code>C</code> from the second input to all outputs, starting from the first output all the way to the 50th output (index 49).

